id: P0238
name: HasMacros
signature: 'HasMacros(f: File) -> Bool'
category: Office/VBA
description: Any VBA present. **Set** if `vbaProject.bin`/VBA streams exist.
scope:
  object: file
  format: OOXML/OLE
mitre_attack: [T1204.002]
trigger_logic:
  positive:
  - ole_streams_present:
    - VBA
    - _VBA_PROJECT
    - dir
  - zip_parts_present:
    - word/vbaProject.bin
    - xl/vbaProject.bin
  negative:
thresholds: {}
confidence_rules:
  - rule: vba_streams_present
    weight: 0.7
  - rule: vba_project_bin_present
    weight: 0.3
evidence_binding:
  captures:
  - bytespan: O(0..512)
extraction:
  method: Hybrid
  failure_modes: []
false_positives:
  - Legacy VBA artifacts without runnable modules
false_negatives:
  - Heavily obfuscated streams evading parser
  - Non-standard VBA storage
provenance:
  citations:
  - ref: C001  # 'Invoice #31415 attached: Automated analysis of malicious Microsoft Office documents'
  - ref: C002  # 'Office VBA + AMSI: Parting the veil on malicious macros'
  - ref: C003  # 'XLM + AMSI: New runtime defense against Excel 4.0 macro malware'
  - ref: C004  # 'Template Injection (T1221)'
  - ref: C005  # 'Analysis Report on Follina (CVE-2022-30190) Vulnerability'
  - ref: C006  # 'Analysis of CVE-2017-11882 Exploit in the Wild'
  - ref: C007  # 'Weaponize Your Word â€“ Malicious Template Injection'
  - ref: C008  # 'Living off the land: Remote Template Injection mechanics'
  - ref: C009  # 'Cheat Sheet for Analyzing Malicious Documents'
  - ref: C010  # 'Oblivion: large-scale analysis of macro-based Office files'
  - ref: C002  # 'Office VBA + AMSI: Parting the veil on malicious macros'
  author: '@gview-team'
implementation:
  status: planned
  perf_cost: low
version: 1
